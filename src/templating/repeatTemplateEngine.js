/**
 * This is the "repeat" handler and template engine.
 *
 *     The repeat handler uses the child nodes of an element to create
 * a template, immediately removing these nodes from DOM and reinserting
 * nodes corresponding to data bound. The node with the repeat handler
 * remains in DOM.
 *
 * Example:
 *     -- MODEL --
 *     var viewModel = {
 *         items: [
 *             {
 *                 description: "Item 1",
 *                 subitems: [
 *                     { description: "Subitem 1.1" }
 *                     { description: "Subitem 1.2" }
 *                     { description: "Subitem 1.3" }
 *                     { description: "Subitem 1.4" }
 *                 ]
 *             },
 *             {
 *                 description: "Item 2",
 *                 subitems: [
 *                     { description: "Subitem 2.1" }
 *                     { description: "Subitem 2.2" }
 *                     { description: "Subitem 2.3" }
 *                     { description: "Subitem 2.4" }
 *                     { description: "Subitem 2.5" }
 *                 ]
 *             },
 *             {
 *                 description: "Item 3",
 *                 subitems: [
 *                     { description: "Subitem 3.1" }
 *                     { description: "Subitem 3.2" }
 *                 ]
 *             }
 *         ]
 *     };
 *
 *     -- VIEW --
 *          <ul data-bind="repeat: items">
 *              <li>
 *                  <span data-bind="text: description"></span>
 *                  <ul data-bind="repeat: subitems">
 *                      <li data-bind="text: description"></li>
 *                  </ul>
 *              </li>
 *          </ul>
 *
 */
(function () {

    var templates = {};
    var uniqueId = 1;
    var SKIP_KEY = '__ko_repeat_skip';

    // This engine uses array of DOM nodes cloning to render templates.
    // Each template is an array stored in a map having it's name as a key
    var repeatTemplateEngine = new ko.templateEngine();
    repeatTemplateEngine['renderTemplate'] = function (templateName, data, options) {
        return ko.utils.arrayMap(templates[templateName].templateNodes, function (templateNode) {
            var cloneNode = templateNode.cloneNode(true);
            // Should we be doing this here?
            ko.applyBindings(data, cloneNode);
            return cloneNode;
        });
    };
    repeatTemplateEngine['isTemplateRewritten'] = function (templateName) {
        // Don't realized what exactly is rewriting for
        return true;
    };
    repeatTemplateEngine['rewriteTemplate'] = function (templateName, rewriterCallback) {
        // Never rewrite
    };
    repeatTemplateEngine['createJavaScriptEvaluatorBlock'] = function (script) {
        // We don't rewrite, so don't evaluate
    };

    function createTemplateAndEmptyElement(element) {
        // Create array with child nodes
        var childNodeArray = ko.utils.arrayMap(element.childNodes, function (childNode) {
            return childNode;
        });
        // Create clones from child nodes
        var templateNodes = ko.utils.arrayMap(childNodeArray, function (childNode) {
            return childNode.cloneNode(true);
        });
        // Makes the data-bind attributes uneffective.
        // At this time Knockout has already built its data-bind aware element
        // array and it's going to process them, even after we remove them from DOM.
        // We are fooling KO so it's going call us with a superfluous attribute
        ko.utils.arrayForEach(element.getElementsByTagName("*"), function (childNode) {
            if (childNode.hasAttribute && childNode.hasAttribute("data-bind")) {
                childNode.setAttribute("data-bind", "repeat: '" + SKIP_KEY + "'");
            }
        });
        // Remove the source template nodes from DOM. We don't need them anymore
        ko.utils.arrayForEach(childNodeArray, function (childNode) {
            ko.removeNode(childNode);
        });
        // Template has the same id as element, or an autogenerated one
        var templateId = element.getAttribute("id") || ("__ko_repeat_"+(uniqueId++));
        templates[ templateId ] = {
            templateNodes: templateNodes
        };
        return templateId;
    }

    ko.bindingHandlers['repeat'] = {
        'init': function(element, valueAccessor, allBindingsAccessor, viewModel) {

            var value = valueAccessor();
            if (ko.utils.unwrapObservable(value) == SKIP_KEY) return;
            var templateId = createTemplateAndEmptyElement(element);

            var parsedBindings = allBindingsAccessor();
            parsedBindings.template = {
                'name': templateId,
                'foreach': value,
                'templateEngine': repeatTemplateEngine
            };

            var initTemplate = ko.bindingHandlers['template']['init'];
            if (typeof init == "function") {
                var templateAccessor = function () {
                    return parsedBindings.template;
                }
                initTemplate(element, templateAccessor, allBindingsAccessor, viewModel);
            }
        }
    }

    ko.exportSymbol('ko.repeatTemplateEngine', ko.repeatTemplateEngine);
})();
