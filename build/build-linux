#!/bin/sh

OutDebugFile='output/knockout-latest.debug.js'
OutMinFile='output/knockout-latest.js'

Version=`cat fragments/version.txt`
VersionHeaderPath='fragments/version-header.js'
VersionJsFile='../src/version.js'
sed "s/##VERSION##/$Version/" <$VersionHeaderPath > $VersionHeaderPath.temp
sed "s/Working-Debug/$Version/" <$VersionJsFile > $VersionJsFile.temp

# Combine the source files
SourceFiles=`grep js < fragments/source-references.js | # Find JS references 
             sed "s/[ \',]//g" |                        # Strip off JSON fluff (whitespace, commas, quotes)
             sed -e 's/.*/..\/&/' |                     # Fix the paths by prefixing with ../
             sed "s/version\.js/version\.js\.temp/" |    # Use a temporary version with correct version number
             tr '\n' ' '`                               # Combine into single line
cat fragments/amd-pre.js            > $OutDebugFile.temp
cat $SourceFiles                    >> $OutDebugFile.temp
cat fragments/amd-post.js           >> $OutDebugFile.temp

# Now call Google Closure Compiler to produce a minified version
curl -d output_info=compiled_code -d output_format=text -d compilation_level=ADVANCED_OPTIMIZATIONS --data-urlencode js_code@$OutDebugFile.temp "http://closure-compiler.appspot.com/compile" > $OutMinFile.temp

# Finalise each file by prefixing with version header and surrounding in function closure
cp $VersionHeaderPath.temp $OutDebugFile
echo "(function(window,document,navigator,undefined){" >> $OutDebugFile
cat $OutDebugFile.temp                                 >> $OutDebugFile
echo "})(window,document,navigator);"                  >> $OutDebugFile
rm $OutDebugFile.temp

cp $VersionHeaderPath.temp $OutMinFile
echo "(function(window,document,navigator,undefined){" >> $OutMinFile
cat $OutMinFile.temp                                   >> $OutMinFile
echo "})(window,document,navigator);"                  >> $OutMinFile
rm $OutMinFile.temp

rm $VersionHeaderPath.temp
rm $VersionJsFile.temp
